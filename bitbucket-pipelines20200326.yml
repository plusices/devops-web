image: ntops/k8s-builder:18.5.0
options:
  docker: true

aliases:
  - &defineEnvVar
    export
    STACK_NAME="$APP_NAME-$ENVIRONMENT"
    K8_DEPLOYMENT_STRATEGY=RollingUpdate
    IMAGE_TAG="$ENVIRONMENT-build.$BITBUCKET_BUILD_NUMBER"
    APP_NAME="$APP_NAME-$ENVIRONMENT"
    # AZ_K8_DEPLOYER_KEY=$AZ_K8_DEPLOYER_KEY_TEST
    # AZ_SP_URL=$AZ_SP_URL_TEST
    # AZ_AD_TENANT=$AZ_AD_TENANT_TEST
    # AZ_CR_NAME=$AZ_CR_NAME_TEST
    # AZ_RESOURCE_GROUP=$AZ_RESOURCE_GROUP_TEST
    # AZ_AKS_NAME=$AZ_AKS_NAME_TEST
    # K8_PODS_COUNT=1
    # K8_GW_NAME=$AZ_K8_GW_NAME_TEST
  - &authGCP |
    echo $GCP_K8_DEPLOYER_KEY > key.json
    gcloud auth activate-service-account $GCP_K8_DEPLOYER --key-file=key.json
    gcloud container clusters get-credentials $GCP_K8_CLUSTER_NAME --zone=$GCP_K8_CLUSTER_ZONE --project=$GCP_PROJECT_ID
    kubectl config set-context $(kubectl config current-context) --namespace=$GCP_K8_NAMESPACE
    cat key.json | docker login -u _json_key --password-stdin https://gcr.io
  - &authAzure |
    export K8S_REPO_PULL_SECRET=$AZ_K8S_REPO_PULL_SECRET
    echo $AZ_K8_DEPLOYER_KEY |base64 --decode > az_auth.pem
    az login --service-principal -u $AZ_SP_URL -p az_auth.pem --tenant $AZ_AD_TENANT
    az acr login --name $AZ_CR_NAME
    az aks get-credentials --resource-group $AZ_RESOURCE_GROUP --name $AZ_AKS_NAME
    kubectl config set-context $(kubectl config current-context) --namespace=$AZ_K8_NAMESPACE
    export IMAGE_REPO_ENDPOINT=$AZ_CR_NAME.azurecr.io
    export IMAGE_REPO=$IMAGE_REPO_ENDPOINT/$APP_NAME
  - &prodVersionCheck |
    if [ $(git tag --points-at HEAD) ]
    then
      export IMAGE_TAG="$(git tag --points-at HEAD)"
    else
      echo "No revision tag found. Please tag you existing branch in semantic versioning e.g v1.0.0"
      exit 1
    fi
  - &buildSource |
    npm install
    npm run build
  - &buildDockerImage
    docker build -t $IMAGE_REPO:$IMAGE_TAG . &&
    docker push $IMAGE_REPO:$IMAGE_TAG
  - &prepareDeployment |
    envsubst <./helm/devops-web/values.yaml.tpl >./helm/devops-web/values.build.yaml
    cat ./helm/devops-web/values.build.yaml
    helm init --client-only
    # Dry run for error check
    helm upgrade $STACK_NAME ./helm/devops-web/ -i -f ./helm/devops-web/values.build.yaml --dry-run --debug --reuse-values \
    --set image.repository=$IMAGE_REPO \
    --set image.tag=$IMAGE_TAG
  - &deployHelm |
    helm upgrade $STACK_NAME ./helm/devops-web/ -i -f ./helm/devops-web/values.build.yaml --reuse-values \
    --set image.repository=$IMAGE_REPO \
    --set image.tag=$IMAGE_TAG
  - &notificationScript |
    export MSG_URL="https://$APP_HOSTNAME"
    chmod +x ./tools/pushToDingTalk.sh
    ./tools/pushToDingTalk.sh


- step:
  name: Deploy to develop
  deployment: dev
  # caches:
  #   - docker
  script:
    - export
      ENVIRONMENT=develop
      AZ_K8_NAMESPACE=develop
      # APP_HOSTNAME=$APP_HOSTNAME_DEVELOP
      # BACKEN_API=$BACKEN_API_TEST
      # BACKEN_PORT=$BACKEN_PORT_TEST
      # APPLICATION_PORT=$APPLICATION_PORT
      # BACKEN_SCHEMA=$BACKEN_SCHEMA_DEVELOP
      # WS_SCHEMA=$WS_SCHEMA_DEVELOP
    - *defineEnvVar
    - *authAzure
    - *buildSource
    - *buildDockerImage
    - *prepareDeployment
    - *deployHelm


# pipelines:
#   branches:
#     develop:
#       - step:
#           name: Deploy to develop
#           deployment: dev
#           # caches:
#           #   - docker
#           script:
#             - export
#               ENVIRONMENT=develop
#               AZ_K8_NAMESPACE=develop
#               # APP_HOSTNAME=$APP_HOSTNAME_DEVELOP
#               # BACKEN_API=$BACKEN_API_TEST
#               # BACKEN_PORT=$BACKEN_PORT_TEST
#               # APPLICATION_PORT=$APPLICATION_PORT
#               # BACKEN_SCHEMA=$BACKEN_SCHEMA_DEVELOP
#               # WS_SCHEMA=$WS_SCHEMA_DEVELOP
#             - *defineEnvVar
#             - *authAzure
#             - *buildSource
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript
#     uat:
#       - step:
#           name: Deploy to uat
#           caches:
#             - docker
#           script:
#             - export
#               ENVIRONMENT=uat
#               APP_HOSTNAME=$APP_HOSTNAME_UAT
#               GCP_K8_NAMESPACE=uat
#               VUE_APP_APISERVER=$VUE_APP_APISERVER_UAT
#             - *defineEnvVar
#             - *authAzure
# #            - *buildSource
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript

#   custom:
#     deploy-to-production:
#       - step:
#           name: Deploy to production
#           caches:
#             - docker
#           script:
#             - export ENVIRONMENT=prd
#             - *defineEnvVar
#             - *authAzure
# #            - *buildSource
#             - *prodVersionCheck
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript

#     deploy-to-develop:
#       - step:
#           name: Deploy to develop
#           caches:
#             - docker
#           script:
#             - export
#               ENVIRONMENT=develop
#               APP_HOSTNAME=$APP_HOSTNAME_DEVELOP
#               GCP_K8_NAMESPACE=develop
#               VUE_APP_APISERVER=$VUE_APP_APISERVER_TEST
#             - *defineEnvVar
#             - *authAzure
# #            - *buildSource
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript

#     deploy-to-feature:
#       - step:
#           name: Deploy to feature
#           caches:
#             - docker
#           script:
#             - export
#               ENVIRONMENT=feature
#               APP_HOSTNAME=$APP_HOSTNAME_FEATURE
#               GCP_K8_NAMESPACE=feature
#               VUE_APP_APISERVER=$VUE_APP_APISERVER_TEST
#             - *defineEnvVar
#             - *authAzure
# #            - *buildSource
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript

#     deploy-to-uat:
#       - step:
#           name: Deploy to uat
#           caches:
#             - docker
#           script:
#             - export
#               ENVIRONMENT=uat
#               APP_HOSTNAME=$APP_HOSTNAME_UAT
#               GCP_K8_NAMESPACE=uat
#               VUE_APP_APISERVER=$VUE_APP_APISERVER_UAT
#             - *defineEnvVar
#             - *authAzure
# #            - *buildSource
#             - *buildDockerImage
#             - *prepareDeployment
#             - *deployHelm
# #            - *notificationScript
