
# #user  nobody;
# # worker_processes  1;

# #error_log  logs/error.log;
# #error_log  logs/error.log  notice;
# #error_log  logs/error.log  info;

# #pid        logs/nginx.pid;


# events {
#     worker_connections  1024;
# }


# http {
#     include       mime.types;
#     default_type  application/octet-stream;

#     #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#     #                  '$status $body_bytes_sent "$http_referer" '
#     #                  '"$http_user_agent" "$http_x_forwarded_for"';

#     #access_log  logs/access.log  main;

#     sendfile        on;
#     #tcp_nopush     on;

#     #keepalive_timeout  0;
#     keepalive_timeout  65;

#     gzip on;                 #决定是否开启gzip模块，on表示开启，off表示关闭；
#     gzip_min_length 1k;      #设置允许压缩的页面最小字节(从header头的Content-Length中获取) ，当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为0时，所有页面都进行压缩。建议大于1k
#     gzip_buffers 4 16k;      #设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间,param2:int(k) 后面单位是k。这里设置以16k为单位,按照原始数据大小以16k为单位的4倍申请内存
#     gzip_http_version 1.1;   #识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码
#     gzip_comp_level 2;       #设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大；等级1-9，最小的压缩最快 但是消耗cpu
#     gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;    #设置需要压缩的MIME类型,非设置值不进行压缩，即匹配压缩类型
#     gzip_vary on;            #启用应答头"Vary: Accept-Encoding"

    server {
        listen       80;
        server_name  localhost;
        set_real_ip_from 127.0.0.1;
        set_real_ip_from 10.0.0.0/8;
        real_ip_header X-Forwarded-For;
        allow 127.0.0.1;
        allow 172.0.0.0/8;
        allow 113.100.137.50; #SZ office 10M
        allow 103.126.24.0/24; # SZ office SDWan
        allow 218.255.20.0/24; # HK 14/F
        allow 223.255.148.0/24; #HK office VPN 14/F
        deny all;
        # location ~ ^/(api|auth|media) {
        #     resolver kube-dns.kube-system.svc.cluster.local valid=5s;
        #     set $servers {{ .Values.env.BACKEN_API }};
        #     proxy_http_version 1.1;
        #     proxy_pass http://$servers$request_uri;

        # }
        # location ~ ^/websocket {
        #     resolver kube-dns.kube-system.svc.cluster.local valid=5s;
        #     set $servers {{ .Values.env.BACKEN_API }};
        #     proxy_pass http://$servers$request_uri;
        #     proxy_set_header X-Real_IP $remote_addr;
        #     proxy_set_header Host $host;
        #     proxy_set_header X_Forward_For $proxy_add_x_forwarded_for;
        #     proxy_http_version 1.1;
        #     proxy_set_header Upgrade $http_upgrade;
        #     proxy_set_header Connection 'upgrade';
        # }
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

# }